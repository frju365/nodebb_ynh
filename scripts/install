#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source .fonctions
source /usr/share/yunohost/helpers
set -eu

#=================================================
# MANAGE FAILURE OF THE SCRIPT
#=================================================

ynh_clean_setup () {
# Nettoyage des résidus d'installation non pris en charge par le script remove.
	if test -n "$PID_TAIL"
	then
		SUPPRESS_WARNING kill -s 15 $PID_TAIL	# Arrête l'exécution de tail.
		sudo rm -f "$tempfile"
	fi
	echo ""
}
ynh_abort_if_errors	# Active trap pour arrêter le script si une erreur est détectée.

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
is_public=$YNH_APP_ARG_IS_PUBLIC
path_url="" # Assure la compatibilité avec les fonctions utilisant $path_url
admin_name=$YNH_APP_ARG_ADMIN_NAME
admin_pass=$YNH_APP_ARG_ADMIN_PASS
admin_email=$YNH_APP_ARG_ADMIN_EMAIL
app=$YNH_APP_INSTANCE_NAME
secret=$(ynh_string_random)
#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THIS ARGS
#=================================================

if sudo yunohost domain list | grep -q $domain	# Vérifie la liste des domaines
then	# Si le domaine existe dans Yunohost
	if sudo yunohost app map | grep -q $domain	# Vérifie la liste des apps par domaine
	then 	# Si une app est installée sur ce domaine.
		WARNING echo "An app is already installed on the domain $domain. Mypads needs a whole domain or subdomain to himself."
	fi
fi

CHECK_DOMAINPATH	# Vérifie la disponibilité du path et du domaine.
CHECK_FINALPATH	# Vérifie que le dossier de destination n'est pas déjà utilisé.

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set "$app" admin_pass "$admin_pass"
ynh_app_setting_set "$app" admin_name "$admin_name"
ynh_app_setting_set "$app" admin_email "$admin_email"
ynh_app_setting_set "$app" secret "$secret"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================

port=$(ynh_find_port 4567)	# Cherche un port libre.
ynh_app_setting_set $app port $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
echo "deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
sudo apt-get update
sudo apt-get install -yy -qq mongodb-org
sudo curl -sL https://deb.nodesource.com/setup_7.x | sudo bash -
sudo apt-get install -yy -qq nodejs

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

final_path=/var/www/$app
ynh_app_setting_set $app final_path $final_path
SETUP_SOURCE	# Télécharge la source, décompresse et copie dans $final_path
sudo chmod 755 $final_path -R
sudo chown www-data:www-data $final_path -R

#=================================================
# BEGINING OF THE INSTALLATION
#=================================================

sudo service mongod start
script_dir="$PWD"
pushd "$final_path"
sudo npm install --production
sudo npm install -g mongo
popd

#=================================================
# CREATE A SQL BDD
#=================================================

pushd $final_path
dbname=$app
dbuser=$app
dbpass=$(ynh_string_random)
sudo mongo --shell "$dbname" --eval 'db.createUser( { user: "'${dbuser}'", pwd: "'${dbpass}'", roles: [ "readWrite" ] } );' <<< exit
sudo mongo --shell "$dbname" --eval 'db.grantRolesToUser("'${dbuser}'",[{ role: "clusterMonitor", db: "admin" }]);' <<< exit
popd

#=================================================
# NGINX CONFIGURATION
#=================================================

# Et copie le fichier de config nginx
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf
# Modifie les variables dans le fichier de configuration nginx
sudo sed -i "s@__URL__@$domain@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__PORT__@$port@g" /etc/nginx/conf.d/$domain.d/$app.conf

#=================================================
# CREATE DEDICATED USER
#=================================================

sudo adduser --system --group nodebb

#=================================================
# SPECIFIC SETUP
#=================================================
# HANDLE LOG FILES AND LOGROTATE
#=================================================

# Créer le dossier de log
sudo mkdir -p /var/log/$app
sudo touch /var/log/$app/cryptpad.log
install_log=/var/log/$app/installation.log
sudo touch $install_log
sudo chown $app -R /var/log/$app
sudo chown admin -R $install_log

# Configuration de logrotate
ynh_use_logrotate

#=================================================
# CONFIGURE SERVER.JS	
#=================================================

sudo mv ../conf/config.json $final_path/config.json
sudo sed -i "s@__URL__@$domain@g" $final_path/config.json
sudo sed -i "s@__PORT__@$port@g" $final_path/config.json
sudo sed -i "s@__SECRET__@$secret@g" $final_path/config.json
sudo sed -i "s@dbuser@$dbuser@g" $final_path/config.json
sudo sed -i "s@dbname@$dbname@g" $final_path/config.json
sudo sed -i "s@dbpass@$dbpass@g" $final_path/config.json

#=================================================
# CONFIGURE NODEBB
#=================================================

pushd "$final_path"
sudo chown -R $app: $final_path
sudo node app --setup=\"{\\\"admin:username\\\":\\\"${admin_name}\\\",\\\"admin:email\\\":\\\"${admin_email}\\\",\\\"admin:password\\\":\\\"${admin_pass}\\\",\\\"admin:password:confirm\\\":\\\"${admin_pass}\\\"}\";
popd

sudo chown -R nodebb:nodebb $final_path
#=================================================
# INSTALL MODULES FOR CRYPTPAD
#=================================================

#npm install cryptpad-level-store;


#=================================================
# ENABLE SERVICE IN ADMIN PANEL
#=================================================

# Ajoute le service au monitoring de Yunohost.
sudo yunohost service add $app --log "/var/log/$app/nodebb.log"

#=================================================
# START ETHERPAD IN BACKGROUND
#=================================================
sudo sed -i "s@__PATH__@$final_path@g" ../conf/nodebb.service
id -g "$app" &>/dev/null || sudo addgroup "$app" --system --quiet
id -u "$app" &>/dev/null || sudo adduser "$app" \
      --ingroup "$app" --system --quiet --shell /bin/bash
sudo cp ../conf/"$app".service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl enable "$app".service
sudo systemctl start $app # Démarre Nodebb. Le démarrage est fait le plus tôt possible, car il est très long...

#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" = 0 ];
then
  ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
sudo nginx -t
sudo systemctl reload nginx
